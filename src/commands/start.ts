import type { CommandContext } from 'grammy';
import type { MyContext } from '../types/bot.type';
import { db } from '../database/db';
import {
  checkDomain,
  generateUserDataNoticeDomain,
  saveUserData,
} from '../utils';

export const startCommand = async (ctx: CommandContext<MyContext>) => {
  const telegramUserId = ctx.from?.id;
  const user = await db('user')
    .where({ telegram_user_id: telegramUserId })
    .first();
  if (!user || !user.user_data.hasStarted) {
    const domains = await db('domain');
    const checkDomainsPromises = domains.map((domain) => checkDomain(domain));
    const checkDomainsResult = await Promise.all(checkDomainsPromises);
    ctx.session.name = ctx.from?.first_name || 'User';
    ctx.session.lastAction = 'start';
    ctx.session.noticesDomain = {};
    await db('user').insert({
      telegram_user_id: ctx.from?.id,
      telegram_chat_id: ctx.chat.id,
      user_data: ctx.session,
    });
    const user = await db('user')
      .where({ telegram_user_id: ctx.from?.id })
      .first();
    if (!user) {
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
      return;
    }
    const userNoticesDomain = generateUserDataNoticeDomain(
      checkDomainsResult,
      user
    );
    await saveUserData(user, {
      noticesDomain: userNoticesDomain,
    });
    await ctx.reply(
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${ctx.session.name}! üéâ\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–µ—Å—Å–∏–∏.`
    );
  } else {
    ctx.session = user.user_data;
    await ctx.reply(
      `–í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ "–°—Ç–∞—Ä—Ç". –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${ctx.session.name}!`
    );
  }
};
